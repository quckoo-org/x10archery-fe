run-name: ${{ inputs.comment }} [${{ github.ref_name }} ref] ${{ inputs.application }} - ${{ inputs.environment }} by @${{ github.actor }}
name: CI/CD
on:
  workflow_dispatch:
    inputs:
      application:
        description: 'Application for deploy'
        required: true
        default: x10archery-fe
        type: choice
        options:
          - x10archery-fe
      environment:
        type: environment
        required: true
        description: 'environment to deploy, for prod use workflow from tags'
        default: development
      comment:
        description: "comment"
        required: true
        default: "usefull information"
        type: string

defaults:
  run:
    working-directory: ./

jobs:
  choose_enviroment:
    runs-on: 'ubuntu-latest'
    if: ${{ always() && !(contains(needs.*.result, 'failure')) && !cancelled() }}
    outputs:
      production_ns: ${{ steps.chosen_namespace.outputs.production }}
      development_ns: ${{ steps.chosen_namespace.outputs.development }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: namespaces
        id: chosen_namespace
        run: |
          echo "production=${{ vars.PRODUCTION_NS }}" >> $GITHUB_OUTPUT
          echo "development=${{ vars.DEVELOPMENT_NS }}" >> $GITHUB_OUTPUT

  check_tags:
    runs-on: 'ubuntu-latest'
    if: ${{ always() && !(contains(needs.*.result, 'failure')) && !cancelled() }}
    needs:
      - choose_enviroment
    outputs:
      status: ${{ join(steps.*.conclusion) }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        id: step_development
        name: Development
        if: ${{ inputs.environment == 'development' && github.ref_type != 'tag' }}
        run: |
          echo "Have no tags! Branch [${GITHUB_REF##*/}] would be deployed to development"
          exit 0
      -
        id: step_production
        name: Production
        if: ${{ inputs.environment == 'production' && github.ref_type == 'tag' }}
        run: |
          echo "Tagged version [${{ github.ref_name }}] would be deployed to production"
          exit 0
      -
        name: Fail
        if: steps.step_development.conclusion == 'skipped' && steps.step_production.conclusion == 'skipped'
        run: |
          echo "Deploy failed! Production includes only tagged versions, development excludes tagged versions!"
          exit 1

  image_build_and_push:
    runs-on: 'ubuntu-latest'
    if: ${{ always() && !(contains(needs.*.result, 'failure')) && !cancelled() }}
    needs:
      - check_tags
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.HARBOR_HOST }}
          username: ${{ vars.HARBOR_ROBOT_NAME }}
          password: ${{ secrets.HARBOR_ROBOT_TOKEN }}

      -
        name: Get short sha
        uses: benjlevesque/short-sha@v1.2
        id: short-sha
        with:
          length: 7
      -
        name: Build and push Docker image [Development version]
        if: ${{ inputs.environment == 'development' && github.ref_type != 'tag' }}
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            "SHA_COMMIT=${{ steps.short-sha.outputs.sha }}"
            "BRANCH_NAME=${{ github.ref_name }}"
          push: true
          tags: ${{ vars.HARBOR_HOST }}/${{ vars.HARBOR_PROJECT_NAME }}/${{ vars.APPLICATION_NAME }}:${{ steps.short-sha.outputs.sha }}-dev, ${{ vars.HARBOR_HOST }}/${{ vars.HARBOR_PROJECT_NAME }}/${{ vars.APPLICATION_NAME }}:latest-dev
      -
        name: Build and push Docker image [Production version]
        if: ${{ inputs.environment == 'production' && github.ref_type == 'tag' }}
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            "SHA_COMMIT=${{ steps.short-sha.outputs.sha }}"
            "VERSION_TAG=${{ github.ref_name }}"
          push: true
          tags: ${{ vars.HARBOR_HOST }}/${{ vars.HARBOR_PROJECT_NAME }}/${{ vars.APPLICATION_NAME }}:${{ github.ref_name }}, ${{ vars.HARBOR_HOST }}/${{ vars.HARBOR_PROJECT_NAME }}/${{ vars.APPLICATION_NAME }}:latest

  helm_prepare_and_push:
      runs-on: 'ubuntu-latest'
      if: ${{ always() && !(contains(needs.*.result, 'failure')) && !cancelled() }}
      needs:
      - image_build_and_push
      container:
        image: quay.io/roboll/helmfile:v0.142.0
      env:
        HELM_EXPERIMENTAL_OCI: 1
        DEFAULT_VERSION_CHART: "0.0.0"
      environment: ${{ inputs.environment }}
      steps:
      - 
        name: Checkout
        uses: actions/checkout@v3
      - 
        name: Get short sha
        uses: benjlevesque/short-sha@v1.2
        id: short-sha
        with:
          length: 7
      - 
        name: Lint Helm chart
        env:
          SHORT_SHA: ${{ steps.short-sha.outputs.sha }}
        run: |
          sed -i "s/version\:.*/version\: ${{ env.DEFAULT_VERSION_CHART }}-${{ env.SHORT_SHA }}/" .helm/${{ vars.APPLICATION_NAME }}/Chart.yaml
          sed -i "s/appVersion\:.*/appVersion\: ${{ env.DEFAULT_VERSION_CHART }}-${{ env.SHORT_SHA }}/" .helm/${{ vars.APPLICATION_NAME }}/Chart.yaml
          helm lint ./.helm/${{ vars.APPLICATION_NAME }}
      - 
        name: Push Helm chart
        env:
          SHORT_SHA: ${{ steps.short-sha.outputs.sha }}
        run: |
          echo "${{ secrets.HARBOR_ROBOT_TOKEN }}" | helm registry login ${{ vars.HARBOR_HOST }} --username '${{ vars.HARBOR_ROBOT_NAME }}' --password-stdin
          helm package ./.helm/${{ vars.APPLICATION_NAME }}
          helm push ${{ vars.APPLICATION_NAME }}-${{ env.DEFAULT_VERSION_CHART }}-${{ env.SHORT_SHA }}.tgz oci://${{ vars.HARBOR_HOST }}/${{ vars.HARBOR_PROJECT_NAME }}/${{ vars.APPLICATION_NAME }}-chart
          rm ${{ vars.APPLICATION_NAME }}-${{ env.DEFAULT_VERSION_CHART }}-${{ env.SHORT_SHA }}.tgz

  deploy:
      runs-on: 'ubuntu-latest'
      if: ${{ always() && !(contains(needs.*.result, 'failure')) && !cancelled() }}
      needs:
      - helm_prepare_and_push
      container:
        image: quay.io/roboll/helmfile:v0.142.0
      env:
        HELM_EXPERIMENTAL_OCI: 1
        DEFAULT_VERSION_CHART: "0.0.0"
      environment: ${{ inputs.environment }}
      steps:
      - 
        name: Checkout
        uses: actions/checkout@v3
      - 
        name: Get short sha
        uses: benjlevesque/short-sha@v1.2
        id: short-sha
        with:
          length: 7
      -
        name: Deploy
        env:
          SHORT_SHA: ${{ steps.short-sha.outputs.sha }}
          CHART_VERSION: ${{ env.DEFAULT_VERSION_CHART }}-${{ steps.short-sha.outputs.sha }}
          IMAGE_TAG: ${{ steps.short-sha.outputs.sha }}-dev
          ENVIRONMENT: ${{ inputs.environment }}
          SECRET_NAME: ${{ vars.SECRET_NAME }}
          HARBOR_ROBOT_TOKEN: ${{ secrets.HARBOR_ROBOT_TOKEN }}
        run: |
          echo ${{ secrets.KUBE_CONFIG }} | base64 -d > ~/CONFIG
          export KUBECONFIG=~/CONFIG
          echo "${{ secrets.HARBOR_ROBOT_TOKEN }}" | helm registry login ${{ vars.HARBOR_HOST }} --username '${{ vars.HARBOR_ROBOT_NAME }}' --password-stdin
          helmfile -f .helm/helmfile.yaml -e "${{ env.ENVIRONMENT }}" --state-values-set "HARBOR_HOST=${{ vars.HARBOR_HOST }},HARBOR_PROJECT_NAME=${{ vars.HARBOR_PROJECT_NAME }},APPLICATION_NAME=${{ vars.APPLICATION_NAME }},CHART_VERSION=${{ env.CHART_VERSION }},IMAGE_TAG=${{ env.IMAGE_TAG }},K8S_NAMESPACE=${{ vars.K8S_NAMESPACE }},HARBOR_ROBOT_NAME=${{ vars.HARBOR_ROBOT_NAME }},HARBOR_ROBOT_TOKEN=${{ secrets.HARBOR_ROBOT_TOKEN }},SECRET_NAME=${{ vars.SECRET_NAME }}" sync
          echo "Helm chart version: ${{ env.CHART_VERSION }}" >> "$GITHUB_STEP_SUMMARY"